"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class lcmt_robotiq_output(object):
    __slots__ = ["rACT", "rGTO", "rATR", "rPR", "rSP", "rFR"]

    def __init__(self):
        self.rACT = 0
        self.rGTO = 0
        self.rATR = 0
        self.rPR = 0
        self.rSP = 0
        self.rFR = 0

    def encode(self):
        buf = BytesIO()
        buf.write(lcmt_robotiq_output._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">BBBBBB", self.rACT, self.rGTO, self.rATR, self.rPR, self.rSP, self.rFR))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != lcmt_robotiq_output._get_packed_fingerprint():
            raise ValueError("Decode error")
        return lcmt_robotiq_output._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = lcmt_robotiq_output()
        self.rACT, self.rGTO, self.rATR, self.rPR, self.rSP, self.rFR = struct.unpack(">BBBBBB", buf.read(6))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if lcmt_robotiq_output in parents: return 0
        tmphash = (0xe2da9e45b892c36) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if lcmt_robotiq_output._packed_fingerprint is None:
            lcmt_robotiq_output._packed_fingerprint = struct.pack(">Q", lcmt_robotiq_output._get_hash_recursive([]))
        return lcmt_robotiq_output._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

