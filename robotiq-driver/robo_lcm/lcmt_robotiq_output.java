/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package drake;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class lcmt_robotiq_output implements lcm.lcm.LCMEncodable
{
    public byte rACT;
    public byte rGTO;
    public byte rATR;
    public byte rPR;
    public byte rSP;
    public byte rFR;
 
    public lcmt_robotiq_output()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x0e2da9e45b892c36L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(drake.lcmt_robotiq_output.class))
            return 0L;
 
        classes.add(drake.lcmt_robotiq_output.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeByte(this.rACT); 
 
        outs.writeByte(this.rGTO); 
 
        outs.writeByte(this.rATR); 
 
        outs.writeByte(this.rPR); 
 
        outs.writeByte(this.rSP); 
 
        outs.writeByte(this.rFR); 
 
    }
 
    public lcmt_robotiq_output(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public lcmt_robotiq_output(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static drake.lcmt_robotiq_output _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        drake.lcmt_robotiq_output o = new drake.lcmt_robotiq_output();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.rACT = ins.readByte();
 
        this.rGTO = ins.readByte();
 
        this.rATR = ins.readByte();
 
        this.rPR = ins.readByte();
 
        this.rSP = ins.readByte();
 
        this.rFR = ins.readByte();
 
    }
 
    public drake.lcmt_robotiq_output copy()
    {
        drake.lcmt_robotiq_output outobj = new drake.lcmt_robotiq_output();
        outobj.rACT = this.rACT;
 
        outobj.rGTO = this.rGTO;
 
        outobj.rATR = this.rATR;
 
        outobj.rPR = this.rPR;
 
        outobj.rSP = this.rSP;
 
        outobj.rFR = this.rFR;
 
        return outobj;
    }
 
}

